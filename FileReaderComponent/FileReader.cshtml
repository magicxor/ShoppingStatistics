@using System.IO;
@using Microsoft.AspNetCore.Blazor;
@using Microsoft.AspNetCore.Blazor.Components;
@using FileReaderComponent;

<input type="file" ref="@fileElement" class="@Class" accept="@Accept" onchange="@onChange" maxlength="@(MaxLength)" />

@functions{
    ElementRef fileElement;
    FileReaderRef fileReference;

    [Parameter]
    private string Class { get; set; }

    [Parameter]
    private string Accept { get; set; }

    [Parameter]
    private int MaxLength { get; set; }

    [Parameter]
    private Func<IFileReaderRef, Task> Change { get; set; }

    [Parameter]
    private IFileReaderRef ReaderRef
    {
        get { return fileReference; }
        set
        {
            var typed = value as FileReaderRef;
            fileReference = typed;
            if (typed != null)
            {
                typed.GetElementRef = () => fileElement;
            }
        }
    }

    private async Task onChange()
    {
        // ReaderRef is initiated here if not already done just in case the component just listens to change events
        await Change?.Invoke(ReaderRef ?? (ReaderRef = FileReaderReference.Create()));
    }
}